/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.mybookmarks.controllers;

import java.util.List;

import io.swagger.v3.oas.annotations.Parameter;
import org.example.mybookmarks.model.BookmarkDTO;
import org.example.mybookmarks.model.BookmarkGetRequest;
import org.example.mybookmarks.security.MyBookmarksUserDetails;
import org.example.mybookmarks.services.BookmarksService;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class BookmarkApiController extends BaseController {
    private final BookmarksService service;

    public BookmarkApiController(BookmarksService service) {
        this.service = service;
    }


    @DeleteMapping("/bookmark/{bookmark_id}")
    void bookmarkBookmarkIdDelete(
        @Parameter(name = "bookmark_id", required = true)
        @PathVariable("bookmark_id") Long bookmarkId,
        @AuthenticationPrincipal MyBookmarksUserDetails userDetails)
    {
        service.deleteUserBookmark(userDetails.getUserId(), bookmarkId);
    }

    @GetMapping("/bookmark/{bookmark_id}")
    BookmarkDTO bookmarkBookmarkIdGet(
        @Parameter(name = "bookmark_id", required = true)
        @PathVariable("bookmark_id") Long bookmarkId,
        @AuthenticationPrincipal MyBookmarksUserDetails userDetails
    ) {
        return service.findUserBookmark(userDetails.getUserId(), bookmarkId);
    }

    @GetMapping("/bookmark")
    List<BookmarkDTO> bookmarkGet(
        @RequestParam(value = "tag", required = false) String tag,
        @RequestParam(value = "sorting_order", required = false) String sortingOrder,
        @AuthenticationPrincipal MyBookmarksUserDetails userDetails)
    {
        return service.findUserBookmarks(userDetails.getUserId(), tag, sortingOrder);
    }

    @PostMapping( "/bookmark")
    BookmarkDTO bookmarkPost(@RequestBody BookmarkGetRequest newBookmark,
                             @AuthenticationPrincipal MyBookmarksUserDetails userDetails)
    {
        return service.addUserBookmark(userDetails.getUserId(), newBookmark.getUrl(), newBookmark.getTag());
    }

}
