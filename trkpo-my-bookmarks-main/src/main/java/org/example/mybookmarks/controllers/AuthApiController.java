/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.0.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.example.mybookmarks.controllers;

import org.example.mybookmarks.model.AuthOkResponse;
import org.example.mybookmarks.model.ErrorResponse;
import org.example.mybookmarks.model.UserCreds;
import org.example.mybookmarks.security.JwtTokenUtil;
import org.example.mybookmarks.security.MyBookmarksUserDetails;
import org.example.mybookmarks.services.JwtUserDetailsService;
import org.example.mybookmarks.services.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.DisabledException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import static org.apache.commons.lang3.StringUtils.isNotEmpty;

@RestController
public class AuthApiController extends BaseController {
    private final AuthenticationManager authenticationManager;
    private final JwtTokenUtil jwtTokenUtil;
    private final JwtUserDetailsService userDetailsService;
    private final UserService userService;


    public AuthApiController(
            AuthenticationManager authenticationManager,
            JwtTokenUtil jwtTokenUtil,
            JwtUserDetailsService userDetailsService,
            UserService userService)
    {
        this.authenticationManager = authenticationManager;
        this.jwtTokenUtil = jwtTokenUtil;
        this.userDetailsService = userDetailsService;
        this.userService = userService;
    }

    @PostMapping("/register")
    ResponseEntity<?> registerUser(@RequestBody UserCreds userCreds) {
        String email = userCreds.getEmail();
        String password = userCreds.getPassword();
        if (isNotEmpty(email) && isNotEmpty(password)) {
            userService.addNewUser(email, password);
            return ResponseEntity.ok().build();
        }
        return ResponseEntity.badRequest().body(new ErrorResponse().error("Invalid input"));
    }
    @DeleteMapping("/account")
    void deleteAccount(@AuthenticationPrincipal MyBookmarksUserDetails userDetails) {
        userService.deleteAccount(userDetails.getUserId());
    }

    @PostMapping("/auth")
    AuthOkResponse authPost(@RequestBody UserCreds authenticationRequest) throws Exception {
        authenticate(authenticationRequest.getEmail(), authenticationRequest.getPassword());
        UserDetails userDetails = userDetailsService.loadUserByUsername(authenticationRequest.getEmail());
        String token = jwtTokenUtil.generateToken(userDetails);
        return new AuthOkResponse().authToken(token);
    }

    private void authenticate(String username, String password) throws Exception {
        try {
            authenticationManager.authenticate(new UsernamePasswordAuthenticationToken(username, password));
        } catch (DisabledException e) {
            throw new Exception("USER_DISABLED", e);
        } catch (BadCredentialsException e) {
            throw new Exception("INVALID_CREDENTIALS", e);
        }
    }

}
